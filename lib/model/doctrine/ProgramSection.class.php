<?php

/**
 * ProgramSection
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class ProgramSection extends BaseProgramSection
{
    public function __toString() {
            return $this->getProgram().' at '.$this->getCenter();
    }
    
    public function getWithStudents($leftout = TRUE)## leftout=FALSE means only non-leftout enrollments
    {                                                              ## 
        $q = Doctrine_Query::create()
                ->from('ProgramSection ps')
                ->leftJoin('ps.EnrollmentInfos ei')
                ->where('ps.id = ?', $this->getId());
                 
        
        if(!$leftout)
            $q->andWhere('ei.leftout = ?', FALSE);

                
        return $q->fetchOne();           
    }

    public function getWithAddEnrollments()## leftout=FALSE means only non-leftout enrollments
    {                                                              ## 
        $q = Doctrine_Query::create()
                ->from('ProgramSection ps')
                ->leftJoin('ps.EnrollmentInfos ei') 
                ->leftJoin('ei.CoursePools cp')
                ->where('ei.leftout = ?', TRUE)
                ->andWhere('ps.id = ?', $this->getId());
                
        return $q->fetchOne();           
    }    
    
    public function getWithAllEnrollments()## leftout=FALSE means only non-leftout enrollments
    {                                                              ## 
        $q = Doctrine_Query::create()
                ->from('ProgramSection ps')
                ->leftJoin('ps.EnrollmentInfos ei') 
                ->leftJoin('ei.CoursePools cp')
                ->where('ps.id = ?', $this->getId());
                
        return $q->fetchOne();           
    }        
    
    public function getWithNotRegisteredStudents()## leftout=FALSE means only non-leftout enrollments
    {                                                              ## 
        $q = Doctrine_Query::create()
                ->from('ProgramSection ps')
                ->leftJoin('ps.EnrollmentInfos ei')                                                
                ->where('ei.semester_action = ?', sfConfig::get('app_enrolled_semester_action'))
                ->andWhere('ei.leftout = ?', FALSE)
                ->andWhere('ps.id = ?', $this->getId());
                
        return $q->fetchOne();           
    }    
    
    public function checkAddEnrollments()
    {
        $q = Doctrine_Query::create()
                ->from('ProgramSection ps')
                ->leftJoin('ps.EnrollmentInfos ei')
                ->where('ps.id = ? ', $this->getId())      
                ->andWhere('ei.leftout = ?', TRUE); ##fetch only visible enrollments
                
        if($q->execute()->count() != 0)          
            return TRUE;
        else
            return FALSE; 
    }    
    
    public function getWithEnrollmentsForGradeSubmission($studentIdNamePairArray = NULL, $courseId = NULL )
    {
         $q = Doctrine_Query::create()
                 ->from('ProgramSection ps')
                 ->leftJoin('ps.EnrollmentInfos ei')
                 ->leftJoin('ps.SectionCourseOfferings sco')
                 ->leftJoin('ei.Registrations rg')
                 ->leftJoin('rg.StudentCourseGrades scg')
                 ->where('scg.course_id = ?', $courseId)
                 ->whereIn('scg.student_id', array_keys($studentIdNamePairArray))
                 ->andWhere('sco.course_id = ?', $courseId);
                
         return $q->fetchOne(); 
    }

    public function getWithCourseStudents( $courseId = NULL )
    {
         $q = Doctrine_Query::create()
                 ->from('ProgramSection ps')
                 ->innerJoin('ps.EnrollmentInfos ei')
                 ->innerJoin('ps.SectionCourseOfferings sco')
                 ->innerJoin('ei.Registrations rg')
                 ->innerJoin('rg.StudentCourseGrades scg')
                 ->where('ps.id = ?', $this->getId())
                 ->andWhere('scg.course_id = ?', $courseId)
                 ->andWhere('scg.is_calculated = ?', TRUE)
                 ->andWhere('sco.course_id = ?', $courseId);
                
         return $q->fetchOne(); 
    }   
    public function getWithActiveNotRegradedCourses($studentId = null)    
    {
         $q = Doctrine_Query::create()
                 ->from('ProgramSection ps')
                 ->innerJoin('ps.EnrollmentInfos ei')
                 ->innerJoin('ps.SectionCourseOfferings sco')
                 ->innerJoin('ei.Registrations rg')
                 ->innerJoin('rg.StudentCourseGrades scg')
                 ->where('ps.id = ?', $this->getId())                 
                 ->andWhere('scg.is_calculated = ?', TRUE)
                 ->andWhere('sco.student_id = ?', $studentId)
                 ->andWhere('sco.grade_status = ?', 1)
                 ->andWhere('ei.leftout  = ?', FALSE)
                 ->andWhereIn('sco.regrade_status', $regradeStatus);
                
         return $q->fetchOne();        
    }
    public function hasEnrollments()
    {
        if($this->getEnrollmentInfos()->count() != 0)
            return TRUE;
        else
            return FALSE; 
    }
    public function hasCourseOffers()
    {
        if($this->getSectionCourseOfferings()->count() != 0)
            return TRUE;
        else
            return FALSE; 
    }    
    
    public function hasRegisteredStudents() ## This checks If Enrolled Students Under Given Section are Registered For Courses Or Not
    {
        foreach($this->getEnrollmentInfos() as $ei )
        {
            if($ei->getSemesterAction() == sfConfig::get('app_registered_semester_action'))
                return TRUE; 
        }
        
        return FALSE; 
    }  
    
    public function courseHasStudents($courseId = NULL)
    {
        if(is_null($courseId))
            return FALSE;
        

        foreach($this->getEnrollmentInfos() as $ei )                
        {
            foreach($ei->getRegistrations() as $rg)
            {
                foreach($rg->getStudentCourseGrades() as $scg)                
                {                                           
                    if($scg->getCourseId() == $courseId && $scg->getStudentId() != '' )
                        return TRUE;
                }
            }
        }
        
        return FALSE; 
    }
    
    public function sectionIsPromoted()
    {
        if($this->getIsPromoted() && !$this->isActivated())
            return TRUE;
        else
            return FALSE; 
    }
    
    public function courseIsOffered($courseId = NULL)
    {
        if(is_null($courseId))
            return FALSE;
        
        foreach($this->getSectionCourseOfferings() as $sco)
        {                                          
            if($sco->getCourseId() == $courseId)
                return TRUE;
        }
        
        return FALSE;         
    }
    
    public function courseHasGrade($courseId = NULL)
    {
        if(is_null($courseId))
            return FALSE;
        
        foreach($this->getSectionCourseOfferings() as $sco)
        {                                          
            if($sco->getCourseId() == $courseId)
                if($sco->getGradeStatus())
                    return TRUE;
        }
        
        return FALSE; 
    }    
    
    public function unofferCourses()
    {
        foreach($this->getSectionCourseOfferings() as $sco )
        {
            $sco->delete ();
        }
    }

    public function unofferCourse($courseId = NULL)
    {
        foreach($this->getSectionCourseOfferings() as $sco )
        {
            if($sco->getCourseId() == $courseId)
                $sco->delete ();
        }
    }    
    
    public function checkToUnenroll()
    {
        foreach($this->getEnrollmentInfos() as $ei)
        {
            if( !( ($ei->getSemesterAction() == sfConfig::get('app_enrolled_semester_action') && 
                    $ei->getEnrollmentAction() == sfConfig::get('app_admission_enrollment')) ||
                        ($ei->getSemesterAction() == sfConfig::get('app_registered_semester_action') &&
                         $ei->getEnrollmentAction() == sfConfig::get('app_admission_enrollment'))   
                    ))
            {
                return FALSE;
            }
        }
        return TRUE; 
    }
    
    public function checkToEdit()
    {
        if($this->hasEnrollments())
        {
            if($this->checkToUnenroll())
                return TRUE;
            else
                return FALSE; 
        }
        else
            return TRUE;       
    }
    public function updateEnrollments($programId, $academicYear, $year, $semester)
    {
        foreach($this->getEnrollmentInfos() as $ei)
            $ei->updateEnrollment($programId, $academicYear, $year, $semester);
    }
    
    public function isActivated()
    {
        if($this->getIsActivated())
            return TRUE;
        else 
            return FALSE; 
    }
    
    public function toggleStatus()
    {
        if($this->isActivated())
        {
            $this->setIsActivated(FALSE);
            $this->save();            
        }
        else
        {
            $this->setIsActivated(TRUE);
            $this->save();
        }
        
    }
    
    public function getSectionStatus()
    {
        if(!$this->getIsActivated())
        {
            if($this->getIsPromoted())
                return "Promoted";
            else
                return "Disabled";
        }
        return "Active";
    }
    public function showToggleStatus()
    {
        if($this->getSectionStatus()=='Promoted' || $this->getSectionStatus()=='Not Known')
            return FALSE;
        else
            return TRUE;
    }
    
    public function checkIfGradeIsSubmitted()
    {
        ## and make sure grade is not entered
        if($this->getSectionCourseOfferings()->count() == 0)
        {
            return FALSE;
        }         
        else 
        {
            foreach($this->getSectionCourseOfferings() as $sco)
            {
                if($sco->getGradeStatus())
                    return TRUE; 
            }
            
            return FALSE;            
        }        
    }
    
    public function checkToEnroll()
    {
        if($this->getYear() == 1 && $this->getSemester() == 1 && !$this->getIsPromoted())
            return TRUE;
        else
            return FALSE;
    }        
    
    public function checkIfGradeIsSubmittedForAllCourses()
    {
        $count = 0;
        
        foreach($this->getSectionCourseOfferings() as $sco)
        {
            if($sco->getGradeStatus())
            {
                $count++;
                if($this->getSectionCourseOfferings()->count() == $count)
                    return TRUE;          
            }
        }
        
        return FALSE; 
    }
    
    public function checkToAdmit()
    {       
        if($this->getYear() == 1 && $this->getSemester() == 1 && !$this->getIsPromoted())
        {
            if($this->checkIfGradeIsSubmitted())
                return FALSE;
            else
                return TRUE;             
        }
        else
            return FALSE;
    }        
    
    public function getSemesterPrerequisites($departmentId = NULL)
    {
        $courseIdsAray = array();
        if(!$this->hasCourseOffers())
            return NULL;
        
        foreach($this->getSectionCourseOfferings() as $sco)
        {
            $courseIdsAray[$sco->getCourseId()]    = $sco->getCourseId();
        }
        
        $prerequisite_courses = Doctrine_Core::getTable('RelatedCourses')->getSemesterPrerequisiteCourseIdsArray($courseIdsAray, $departmentId);
        
        if(is_null($prerequisite_courses))
            return NULL;
        
        
        return $prerequisite_courses; 
            
    }
    
    public function getCourseOfferStatus()
    {
        if($this->hasCourseOffers())
            return "Offered";
        else
            return "Not Offered";
    }
    
    public function getStudentEnrollmentInfo($studentId = NULL)
    {
        foreach($this->getEnrollmentInfos() as $ei)
        {
            if($ei->getStudentId() == $studentId)
                return $ei; 
        }
        
        return NULL;
    }
    
    public function getCourseOffers()
    {
        $courseOffers   = array();
        foreach($this->getSectionCourseOfferings() as $sco)
            $courseOffers[$sco->getCourseId()] = $sco->getCourse()->getCourseNumber().' - '.$sco->getCourse()->getName(); 
        
        return $courseOffers; 
    }
    
    public function getRegisteredStudents()
    {
        $studentIdsArray = array();
        if($this->getEnrollmentInfos()->count() > 0) 
        {
            foreach($this->getEnrollmentInfos() as $ei)
            {
                if($ei->isRegistered())
                    $studentIdsArray[$ei->getStudentId()]   = $ei->getStudent()->getName().' '.$ei->getStudent()->getFathersName().' '.$ei->getStudent()->getGrandfathersName();
            }
            return $studentIdsArray;
        }
        else
            return NULL;
    }
    
    public function isRegistered()
    {
        if($this->getEnrollmentInfos()->count() == 0)
            return FALSE;
        
        foreach($this->getEnrollmentInfos() as $ei)
        {
            if($ei->isRegistered())
                return TRUE;
        }
        
        return FALSE;
    }
}