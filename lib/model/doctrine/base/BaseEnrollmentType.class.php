<?php

/**
 * BaseEnrollmentType
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property string $name
 * @property integer $overload
 * @property integer $underload
 * @property Doctrine_Collection $Programs
 * 
 * @method string              getName()      Returns the current record's "name" value
 * @method integer             getOverload()  Returns the current record's "overload" value
 * @method integer             getUnderload() Returns the current record's "underload" value
 * @method Doctrine_Collection getPrograms()  Returns the current record's "Programs" collection
 * @method EnrollmentType      setName()      Sets the current record's "name" value
 * @method EnrollmentType      setOverload()  Sets the current record's "overload" value
 * @method EnrollmentType      setUnderload() Sets the current record's "underload" value
 * @method EnrollmentType      setPrograms()  Sets the current record's "Programs" collection
 * 
 * @package    srmsnew
 * @subpackage model
 * @author     EyuelG
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseEnrollmentType extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('enrollment_type');
        $this->hasColumn('name', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'unique' => true,
             'length' => 255,
             ));
        $this->hasColumn('overload', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('underload', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasMany('Program as Programs', array(
             'local' => 'id',
             'foreign' => 'enrollment_type_id'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $this->actAs($timestampable0);
    }
}