<?php

/**
 * StudentCourseGradeTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class StudentCourseGradeTable extends Doctrine_Table
{
    /**
     * Returns an instance of this class.
     *
     * @return object StudentCourseGradeTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('StudentCourseGrade');
    }
    public function updateOneStudentGrade($registrationId = NULL, $studentId = NULL, $courseId = NULL, $gradeId = NULL)
    {
        $q  = Doctrine_Query::create()
                ->from('StudentCourseGrade')
                ->where('student_id  = ?', $studentId)
                ->andWhere('registration_id  = ?', $registrationId)
                ->andWhere('course_id  = ?',  $courseId);
        
        $oneStudentCourseGrade  = $q->fetchOne();
        
        $oneStudentCourseGrade->setGradeId($gradeId);
        $oneStudentCourseGrade->setGradeStatus(1);
        $oneStudentCourseGrade->save();        
              
        return $oneStudentCourseGrade; 
        
    }
    
    public function checkIfGradeSubmittedForAllCourses($enrollments)
    {
        foreach($enrollments as $enrollment)       
            $erollmentInfoIds[$enrollment->getId()] = $enrollment->getId();      
                  
        $registrations = Doctrine_Core::getTable('Registration')->getRegistrationByEnrollmentIdArray($erollmentInfoIds);
        foreach($registrations as $registration)
            $registrationId[$registration->getId()] = $registration->getId();
        
        return StudentCourseGradeTable::checkIfGradeSubmittedByRegistrationArray($registrationId);
    }       
    
    static public function checkIfGradeSubmittedByRegistrationArray($registrationId)
    {
        $q  = Doctrine_Query::create()
                ->from('StudentCourseGrade')
                ->where('grade_id IS NOT NULL')
                ->whereIn('registration_id', $registrationId);                
        
        $q->execute(); 
        
        if($q->count() == 0)
            return TRUE; ## GRADE is Submitted already
        else 
            FALSE; 
        
    }
    
    public function getOneStudentCourseGrade( $courseId = NULL , $studentId = NULL )
    {
        $q  = Doctrine_Query::create()
                ->from('StudentCourseGrade')
                ->where('course_id = ?', $courseId)
                ->andWhere('student_id = ?', $studentId);                
        
        return $q->fetchOne();                 
    }
    
    
    public function checkIfStudentCanRegister($studentId, $courses )
    {       
        foreach($courses as $course ) 
        {
            if(Doctrine_Core::getTable('StudentCourseGrade')->checkIfCourseIsFailed($studentId, $course->getId())) ##MAY BE STUDENT DROPPED THE COURSE
            {
                return FALSE; 
            }
            /*elseif(Doctrine_Core::getTable('StudentCourseGrade')->checkIfCourseIsDropped($studentId, $course->getId()))
            {
                return FALSE; 
            } 
             * 
             */           
        }
        
        return TRUE;
    }

    
    public function checkIfCourseIsFailed($studentId = NULL, $courseId = NULL)
    {
        $q  = Doctrine_Query::create()
                ->from('StudentCourseGrade')
                ->where('student_id = ?', $studentId)
                ->andWhere('course_id = ?', $courseId)
                ->andWhere('is_calculated = ?', TRUE);                
        
        $q->fetchOne(); 
        
        if($q->count() == 1 )
        {
            $scg = $q->fetchOne();
            if($scg->getGrade() == 'F')
                return TRUE;
            else 
                return FALSE; 
        }
        else 
            return FALSE;         
    }

    public function checkIfCourseIsDropped($studentId = NULL, $courseId = NULL )
    {
        $q  = Doctrine_Query::create()
                ->from('StudentCourseGrade')
                ->where('student_id  = ? ', $studentId)
                ->andWhere('course_id = ?', $courseId)
                ->andWhere('is_dropped = ?', 1);                
        
        $q->execute(); 
        
        if($q->count() == 0)
            return FALSE; 
        else 
            return TRUE;         
    }     
    
    public function checkIfStudentHasFailedCourses($studentId = NULL, $courseIdsArray = NULL)
    {
        $q  = Doctrine_Query::create()
                ->from('StudentCourseGrade')
                ->where('student_id = ?', $studentId)                
                ->whereIn('course_id', $courseIdsArray)
                ->andWhere('is_calculated = ?', 1);                
        
        $q->execute(); 
        
        $isFailed = FALSE;
        foreach($q->execute() as $scg )
        {
            if($scg->getGrade() == 'F')
                $isFailed = TRUE;
        }    
        
        return $isFailed; 
    }
    public function checkIfStudentHasDroppedCourses($studentId = NULL, $courseIdsArray = NULL)
    {
        $q  = Doctrine_Query::create()
                ->from('StudentCourseGrade')
                ->where('student_id = ?', $studentId)                
                ->whereIn('course_id', $courseIdsArray)
                ->andWhere('is_dropped = ?', 1);                
        
        $q->execute(); 
        
        if($q->execute()->count() != 0)
            return TRUE;
        else
            return FALSE; 
    }    

    public function checkIfStudentHasExemptedCourses($studentId = NULL, $courseIdsArray = NULL)
    {
        $q  = Doctrine_Query::create()
                ->from('StudentCourseGrade')
                ->where('student_id = ?', $studentId)                
                ->whereIn('course_id', $courseIdsArray)
                ->andWhere('is_exempted = ?', 1);                
        
        $q->execute(); 
        
        if($q->execute()->count() != 0)
            return TRUE;
        else
            return FALSE; 
    }       
    
     public function getFailedStudentCourseIdsArray($studentId = NULL, $courseIdsArray = NULL)
    {
        $q  = Doctrine_Query::create()
                ->from('StudentCourseGrade')
                ->where('student_id = ?', $studentId)                
                ->whereIn('course_id', $courseIdsArray)
                ->andWhere('is_calculated = ?', 1);                
        
        $q->execute(); 
        
        if($q->count() != 0)
        {
            $failedCourseIdsArray =  array(); 
            foreach($q->execute() as $scg )
            {
                if($scg->getGrade() == 'F')
                    $failedCourseIdsArray[] = $scg->getCourseId();
            }    

            return $failedCourseIdsArray; 
        }
        else 
            return null; 
    }   
    
    public function dropStudentCourses($studentId = null, $semesterDroppableCoursesArray = null)
    {
        $q  = Doctrine_Query::create()
                ->from('StudentCourseGrade')
                ->where('student_id  = ? ', $studentId)
                ->whereIn('course_id', $semesterDroppableCoursesArray)
                ->andWhere('is_calculated = ?', 1);                
        
        $q->execute();         
        
        foreach($q->execute() as $droppableSCG)
            $droppableSCG->dropStudentCourse();
    } 

    public function dropCourse($studentId = NULL, $courseId = NULL  ) 
    {
             
        $q = Doctrine_Query::create()
                ->from('StudentCourseGrade')
                ->where('student_id = ?', $studentId)
                ->andWhere('course_id = ?', $courseId); 
        
        $scg     = $q->fetchOne();
        
        $scg->setIsDropped(TRUE);        
        $scg->save(); 
    }   
    public function getRegistrationsToOneCourse($courseId = NULL, $registrationIdsArray = NULL )
    {
        $q  = Doctrine_Query::create()
                ->from('StudentCourseGrade')                
                ->where('course_id = ?', $courseId)
                ->andwhereIn('registration_id', $registrationIdsArray);                
        
        return $q->execute();       
    }    
    public function updateOneStudentGradeById($studentCourseGradeId=NULL, $gradeId=NULL)    
    {
        $q  = Doctrine_Query::create()
                ->from('StudentCourseGrade')
                ->where('id  = ?', $studentCourseGradeId);
        
        $oneStudentCourseGrade  = $q->fetchOne(); 
        $oneStudentCourseGrade->setGradeId($gradeId);
        $oneStudentCourseGrade->save();        
              
        return $oneStudentCourseGrade;         
    }

    public function getActiveRegistrationCourses($registrationIdsArray = NULL, $studentId = NULL )
    {
        $isCalculated  = 1;
        $gradeStatus   = 1;
        $q  = Doctrine_Query::create()
                ->from('StudentCourseGrade')
                ->where('student_id = ?', $studentId)
                ->whereIn('registration_id', $registrationIdsArray)                
                ->andWhere('is_calculated = ?', $isCalculated)
                ->andWhere('grade_status = ?', $gradeStatus);

        return $q->execute();
    }

    public function getActiveRegistrationNotRegradedCourses($registrationIdsArray = NULL, $studentId = NULL )
    {
        $isCalculated  = 1;
        $gradeStatus   = 1;
        $regradeStatus = array('0'=>0, '6'=>5);
        $q  = Doctrine_Query::create()
                ->from('StudentCourseGrade')
                ->whereIn('registration_id', $registrationIdsArray)
                ->andWhereIn('regrade_status', $regradeStatus)
                ->andWhere('student_id = ?', $studentId)
                ->andWhere('is_calculated = ?', $isCalculated)                
                ->andWhere('grade_status = ?', $gradeStatus);

        return $q->execute();
    }

    public function getActivatedCoursesForRegrade($regradeRegistrationIdsArray = NULL, $studentId = NULL )
    {
        $regradeStatus = array('2'=>2, '3'=>3);

        $q  = Doctrine_Query::create()
                ->from('StudentCourseGrade')
                ->whereIn('registration_id', $regradeRegistrationIdsArray)
                ->andWhereIn('regrade_status', $regradeStatus)
                ->andWhere('is_repeated = ?', 1)
                ->andWhere('student_id = ?', $studentId);

        return $q->execute();
    }

    public function getAllRegistrationCourses($registrationIdsArray = NULL, $studentId = NULL ) # This will retrieve EVERY COURSES [ENABLED, DISABLED, ADDED, DROPED ]
    {
        $q  = Doctrine_Query::create()
                ->from('StudentCourseGrade')
                ->where('student_id = ?', $studentId)
                ->andwhereIn('registration_id', $registrationIdsArray);

        return $q->execute();
    }

    public function getRegisteredGradedCourse($registrationId = NULL, $studentId=NULL, $courseId = NULL  )
    {

        $q = Doctrine_Query::create()
                ->from('StudentCourseGrade')
                ->where('student_id = ?', $studentId)
                ->andWhere('course_id = ?', $courseId)
                ->andWhere('registration_id = ?', $registrationId);

        return $q->fetchOne();
    }

    public function getOneRegisteredCourse($registrationId = NULL, $studentId=NULL, $courseId = NULL  )
    {

        $q = Doctrine_Query::create()
                ->from('StudentCourseGrade')
                ->where('student_id = ?', $studentId)
                ->andWhere('course_id = ?', $courseId)
                ->andWhere('registration_id = ?', $registrationId);

        return $q->fetchOne();
    }

    public function getOneNormalRegistrationCourse($normalRegistrationId, $courseId = NULL)
    {
        $q = Doctrine_Query::create()
                ->from('StudentCourseGrade')                
                ->where('registration_id = ?', $normalRegistrationId)
                ->andWhere('course_id = ?', $courseId);

        return $q->fetchOne();
    }

    public function getActiveStudentCourseGrades(Doctrine_Query $q = null)
    {
        if(is_null($q)) ## if query is not created by Registration->getActiveStudentCourseGrades()
        {
            $q = Doctrine_Query::creat()
            ->from('StudentCourseGrade scg');
        }

        $q->andWhere('scg.is_calculated = ?', 1);
    }
    
    public function checkIfStudentIsClearForCourses($studentId = NULL, $courseIdsArray = NULL)
    {
        foreach($courseIdsArray as $courseId)
        {
            $q = Doctrine_Query::create()
                    ->from('StudentCourseGrade scg')                
                    ->where('scg.student_id = ?', $studentId)
                    ->andWhere('scg.course_id = ?', $courseId);

            if($q->execute()->count() != 0)
            {
                $scg = $q->fetchOne(); 
                if(!$scg->isPassed())
                    return FALSE; 
            }
            elseif(Doctrine_Core::getTable('StudentExemption')->checkIfCourseIsExempted($studentId, $courseId))
                return TRUE; 
            else
                return FALSE;
        }
        
        return TRUE; 
    }    
    
    public function getOneStudentOneCourseGrade($studentId = NULL, $courseId = NULL)
    {
        if(is_null($studentId) || is_null($courseId) ) 
        {
            return null; 
        }
        else
        {
            
            $q = Doctrine_Query::create()
                    ->from('StudentCourseGrade scg')                
                    ->where('scg.student_id = ?', $studentId)
                    ->andWhere('scg.course_id = ?', $courseId)                    
                    ->andWhere('scg.is_calculated = ?', TRUE);

            if($q->execute()->count() != 0)
            {
                return $q->fetchOne(); 
            }
            else
                return null;
        }
        
        
    }      
}
