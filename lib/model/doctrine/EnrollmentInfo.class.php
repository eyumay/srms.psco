<?php

/**
 * EnrollmentInfo
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    srmsnew
 * @subpackage model
 * @author     EyuelG
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class EnrollmentInfo extends BaseEnrollmentInfo
{
  public function save(Doctrine_Connection $conn = null )
  {
    if($this->isNew() && !$this->getYear() && !$this->getSemester() && !$this->getSectionId() && !$this->getSemesterAction())
    {
	   $this->setYear(1);
	   $this->setSemester(1);
           $this->setSemesterAction(sfConfig::get('app_enrolled_semester_action'));
	   $this->setSectionId(NULL); 
    }  
    if(!$this->getEnrollmentAction())
        $this->setEnrollmentAction(sfConfig::get('app_admission_enrollment'));
    
    parent::save($conn);   
  }
  public function getOneStudentEnrollmentInfoById()
  {
  
  }  
  public function updateEnrollmentSection($sectionId)
  {
    $this->setSectionId($sectionId);
    $this->save(); 
  }  
  public function updateEnrollmentSemesterAction($semesterAction)
  {
    $this->setSemesterAction($semesterAction);
    $this->save(); 
  }
  public function updateEnrollmentInfoForGradeSubmission($courseObj, $gradeObj)
  {
      #CreditHourse semester_chrs, total_chrs
      $courseChr        = $courseObj->getCreditHoure();
      $gradeValue       = $gradeObj->getValue(); 
      $courseGradePoint = $courseChr * $gradeValue; 
      
      $this->setSemesterChrs($this->getSemesterChrs() + $courseChr);
      $this->setTotalChrs($this->getTotalChrs() + $courseChr);
      
      #GradePoints - semester_grade_points, total_grade_points
      $this->setSemesterGradePoints($this->getSemesterGradePoints() + $courseGradePoint);
      $this->setTotalGradePoints($this->getTotalGradePoints() + $courseGradePoint);
      
      $this->save(); 
  }
  public function updateCenterChange($newSectionId = null)
  {
      if(!(is_null($newSectionId)))
      {
        $this->setSectionId($newSectionId);
        $this->save();
      }
  }

    public function getActiveStudentCourseGrades()
    {
        $q = Doctrine_Query::create()
        ->from('Registration r')
                ->where('r.enrollment_info_id = ?', $this->getId());

        return Doctrine::getTable('Registration')->getActiveStudentCourseGrades($q);
    }

    public function getSemesterTotalChrs()
    {
        return $this->getSemesterChrs() - $this->getSemesterRepeatedChrs();
    }
    public function getPreviousTotalChrs()
    {
        return $this->getPreviousChrs() - $this->getPreviousRepeatedChrs();
    }
    public function getSemesterTotalGradePoints()
    {
        return $this->getSemesterGradePoints() - $this->getSemesterRepeatedGradePoints();
    }
    public function getPreviousTotalGradePoints()
    {
        return $this->getPreviousGradePoints() - $this->getPreviousRepeatedGradePoints();
    }
    public function getTotalCreditHours()
    {
        return $this->getTotalChrs() - $this->getTotalRepeatedChrs();
    }
    public function getTotalGPts()
    {
        return $this->getTotalGradePoints() - $this->getTotalRepeatedGradePoints();
    }

    public function getSGPA()
    {
        if(($this->getSemesterChrs() != 0) && ($this->getSemesterGradePoints() != 0) )
            return $this->getSemesterTotalGradePoints() / $this->getSemesterTotalChrs();
        else
            return 'Cannot Determine SGPA';
    }
    public function getPreviousSGPA()
    {
        if($this->getPreviousChrs() != 0 && $this->getPreviousGradePoints() != 0)
                {
            return $this->getPreviousTotalGradePoints() / $this->getPreviousTotalChrs();
        }
    }
    public function getCGPA()
    {
        if(($this->getTotalGradePoints() != 0) && ($this->getTotalChrs() !=0 ))
                {
                return $this->getTotalGPts() / $this->getTotalCreditHours();
        }
        else
            {
            return 'Unable to determin CGPA';
        }
    }
    
    public function checkIfStudentHasDropRegistration()
    {
        #1. Find CURRENT semesterCoursesArray
        $semesterCoursesArray = Doctrine_Core::getTable('SectionCourseOffering')->getSectionSemesterCoursesArray($this->getSectionId());
        
        #2. checkPrerequisites
        if(Doctrine_Core::getTable('RelatedCourses')->checkIfCoursesHavePrerequisites($semesterCoursesArray))
        {
            #2.1 get prerequisite courses
            $prerequisiteCoursesArray = Doctrine_Core::getTable('RelatedCourses')->getSemesterPrerequisiteCourseIdsArray($semesterCoursesArray);
            #2.1.1 IS COURSE FAILED
            if(Doctrine_Core::getTable('StudentCourseGrade')->checkIfStudentHasFailedCourses($this->getStudentId(), $prerequisiteCoursesArray))
            {
                return TRUE; 
            }
            ##2.1.2 IS COURSE DROPPED
            /*elseif (Doctrine_Core::getTable('StudentCourseGrade')->checkIfStudentHasDroppedCourses($this->getStudentId(), $prerequisiteCoursesArray))
            {
                return TRUE;
            }
            elseif (Doctrine_Core::getTable('StudentCourseGrade')->checkIfStudentHasExemptedCourses($this->getStudentId(), $prerequisiteCoursesArray))
            {
                return FALSE; 
            }*
             * 
             */
            else
                return FALSE; 
            
        }
        else
            return FALSE;
    }

    public function getCoursesToDrop()
    {
        $semesterCoursesArray = Doctrine_Core::getTable('SectionCourseOffering')->getSectionSemesterCoursesArray($this->getSectionId());
        $prerequisiteCoursesArray = Doctrine_Core::getTable('RelatedCourses')->getSemesterPrerequisiteCourseIdsArray($semesterCoursesArray);
        $failedPrerequisiteCourses  = Doctrine_Core::getTable('StudentCourseGrade')->getFailedStudentCourseIdsArray($this->getStudentId(), $prerequisiteCoursesArray);
        
        $courseIdsArrayToDrop = Doctrine_Core::getTable('RelatedCourses')->getSemesterDroppableCourseIdsArray($semesterCoursesArray, $failedPrerequisiteCourses); 
        
        return Doctrine_Core::getTable('Course')->getCoursesByCourseIds($courseIdsArrayToDrop); 
    }
    public function makeEnrollment($enrollmentObj = null, $toAcademicYear = null, $toYear = null, $toSemester = null, $toSectionId = null, $enrollmentAction = null, $studentId = null, $programSectionObj=null)
    {
        switch($enrollmentAction)
        {
            case sfConfig::get('app_admission_enrollment'):
                $this->setStudentId($studentId) ;               
                $this->setAcademicYear($toAcademicYear) ;
                $this->setYear($toYear) ;
                $this->setSemester($toSemester) ;

                $this->setProgramId($programSectionObj->getProgramId() ) ;

                $this->setSemesterAction(sfConfig::get('app_enrolled_semester_action'));
                $this->setEnrollmentAction(sfConfig::get('app_admission_enrollment'));
                $this->save();  
                
                $studentCenter = new StudentCenter();
                $studentCenter->setStudentId($studentId);
                $studentCenter->setCenterId($programSectionObj->getCenterId());
                $studentCenter->save(); 
                break;
            case sfConfig::get('app_promotion_enrollment'):                                          
                $this->setStudentId($enrollmentObj->getStudentId()) ;               
                $this->setAcademicYear($toAcademicYear) ;
                $this->setYear($toYear) ;
                $this->setSemester($toSemester) ;
                $this->setSectionId($toSectionId) ;
                $this->setProgramId($enrollmentObj->getProgramId()) ;
                $this->setTotalChrs($enrollmentObj->getTotalChrs()) ;
                $this->setTotalGradePoints($enrollmentObj->getTotalGradePoints()) ;
                $this->setTotalRepeatedChrs($enrollmentObj->getTotalRepeatedChrs()) ;
                $this->setTotalRepeatedGradePoints($enrollmentObj->getTotalRepeatedGradePoints()) ;
                $this->setPreviousChrs($enrollmentObj->getSemesterChrs()) ;
                $this->setPreviousGradePoints($enrollmentObj->getSemesterGradePoints()) ;
                $this->setPreviousRepeatedChrs($enrollmentObj->getSemesterRepeatedChrs()) ;
                $this->setPreviousRepeatedGradePoints($enrollmentObj->getSemesterRepeatedGradePoints()) ;
                $this->setSemesterAction(sfConfig::get('app_enrolled_semester_action'));
                $this->setEnrollmentAction(sfConfig::get('app_promotion_enrollment'));
                $this->save();
                
                ##Also mark previous enrollment as promotted. 
                $enrollmentObj->setSemesterAction(sfConfig::get('app_promoted_semester_action'));
                $enrollmentObj->save(); 
                
                break;
            
            
            case sfConfig::get('app_readmission_enrollment'):
                
                $pSection = Doctrine_Core::getTable('ProgramSection')->findOneById($toSectionId);
                
                ## new enrollment
                $this->setStudentId($enrollmentObj->getStudentId()) ;               
                $this->setAcademicYear($pSection->getAcademicYear()) ;
                $this->setYear($pSection->getYear()) ;
                $this->setSemester($pSection->getSemester()) ;
                $this->setSectionId($pSection->getId()) ;
                $this->setProgramId($enrollmentObj->getProgramId()) ;
                $this->setTotalChrs($enrollmentObj->getTotalChrs()) ;
                $this->setTotalGradePoints($enrollmentObj->getTotalGradePoints()) ;
                $this->setTotalRepeatedChrs($enrollmentObj->getTotalRepeatedChrs()) ;
                $this->setTotalRepeatedGradePoints($enrollmentObj->getTotalRepeatedGradePoints()) ;
                $this->setPreviousChrs($enrollmentObj->getSemesterChrs()) ;
                $this->setPreviousGradePoints($enrollmentObj->getSemesterGradePoints()) ;
                $this->setPreviousRepeatedChrs($enrollmentObj->getSemesterRepeatedChrs()) ;
                $this->setPreviousRepeatedGradePoints($enrollmentObj->getSemesterRepeatedGradePoints()) ;
                $this->setSemesterAction(sfConfig::get('app_enrolled_semester_action'));
                $this->setEnrollmentAction(sfConfig::get('app_readmission_enrollment'));      
                
                ##increment leftout enrollment chrs, gpts from previous chrs ...
                
                $leftoutEnrollments = Doctrine_Core::getTable('EnrollmentInfo')->getLeftoutEnrollments($enrollmentObj);
                if(!is_null($leftoutEnrollments))
                {
                    foreach($leftoutEnrollments as $loe)
                    {
                        ##modify existing $enrollment Module
                        $enrollmentObj->setTotalChrs($enrollmentObj->getTotalChrs() + $loe->getTotalChrs() );
                        $enrollmentObj->setTotalGradePoints($enrollmentObj->getTotalGradePoints() + $loe->getTotalGradePoints());
                        $enrollmentObj->setTotalRepeatedChrs($enrollmentObj->getTotalRepeatedChrs() + $loe->getTotalRepeatedChrs() );
                        $enrollmentObj->setTotalRepeatedGradePoints($enrollmentObj->getTotalRepeatedGradePoints() + $loe->getTotalRepeatedGradePoints() );
                    }
                }                        
                
                ## previous Enrollment
                $enrollmentObj->setLeftout(TRUE);
                $this->save();
                $enrollmentObj->save();
                
                break;
            case sfConfig::get('app_transfer_enrollment'):
                $pSection = Doctrine_Core::getTable('ProgramSection')->findOneById($toSectionId);
                $this->setYear($pSection->getYear());
                $this->setSemester($pSection->getSemester());
                $this->setAcademicYear($pSection->getAcademicYear());
                $this->setSectionId($pSection->getId());
                $this->setSemesterAction(sfConfig::get('app_enrolled_semester_action'));
                $this->setEnrollmentAction($enrollmentAction);
                $this->setProgramId($pSection->getProgramId());
                $this->setStudentId($studentId);
                
                $this->save();
                
                break;
            case sfConfig::get('app_clearance_enrollment'):                
                $this->setEnrollmentAction($enrollmentAction);
                $this->setLeftout(1);
                
                foreach($enrollmentObj->getRegistrations() as $registration)
                    foreach($registration->getStudentCourseGrades()  as $scg )
                    {
                        $courseChr          = $scg->getCourse()->getCreditHoure();
                        $courseGradeValue   = $scg->getGrade()->getValue();                        
                    }
                

                $this->setTotalRepeatedChrs($courseChr);
                $this->setTotalRepeatedGradePoints($courseChr * $courseGradeValue );
                $this->setSemesterAction(sfConfig::get('app_enrolled_semester_action'));
                $this->setStudentId($enrollmentObj->getStudentId());
                $this->setProgramId($enrollmentObj->getProgramId()); ## student is enrolled to his/her Program
                $this->setSectionId($toSectionId);                   ## but this time student is enrolled to a different section for one course
                $this->setAcademicYear($toAcademicYear);
                $this->setYear($toYear);
                $this->setSemester($toSemester);
                
                break;
            case sfConfig::get('app_add_enrollment'):
                break;                        
        }
        
        
    }   
    
    public function getWithStudentCourseGrade($sectionId = null, $courseId = null)
    {
        $q = Doctrine_Query::create()
                ->from('EnrollmentInfo ei')
                ->leftJoin('ei.Registrations rg')
                ->leftJoin('rg.StudentCourseGrades scg')
                ->where('ei.id = ?', $this->getId())
                ->andWhere('ei.section_id = ?', $sectionId)
                ->andWhere('scg.course_id = ?', $courseId)
                ->andWhere('scg.is_calculated = ?', TRUE);
        
        return $q->fetchOne();
    }
    
    public function checkIfClearanceEnrollment()
    {
        if($this->getEnrollmentAction() == sfConfig::get('app_clearance_enrollment'))
            return TRUE;
        else
            return FALSE; 
    }
    public function checkIfEnrolled()
    {
        if(is_null($this->getSectionId()) )
            return FALSE;
        else
            return TRUE;
    }
    
    public function isAdmitted()
    {
        if($this->getEnrollmentStatus() == 'Admitted')
            return TRUE;
        else
            return FALSE;
    }
    
    public function isEnrolled()
    {
         if($this->getEnrollmentStatus() == 'Enrolled')
            return TRUE;
        else
            return FALSE;       
    }
    
    public function isPromoted()
    {
         if($this->getEnrollmentStatus() == 'Promoted')
            return TRUE;
        else
            return FALSE;       
    }    
    
    public function isWithdrawn()
    {
         if($this->getEnrollmentStatus() == 'Withdrawn')
            return TRUE;
        else
            return FALSE;       
    }    
    
    public function isUnder()
    {
         if($this->getEnrollmentStatus() == 'Under')
            return TRUE;
        else
            return FALSE;       
    }    
    
    public function isDismissed()
    {
         if($this->getEnrollmentStatus() == 'Dismissed')
            return TRUE;
        else
            return FALSE;       
    }    
    
    public function isDropout()
    {
         if($this->getEnrollmentStatus() == 'Dropout')
            return TRUE;
        else
            return FALSE;       
    }    
    
    public function isTransferred()
    {
         if($this->getEnrollmentStatus() == 'Transferred')
            return TRUE;
        else
            return FALSE;       
    }    
    public function checkIfAddEnrollmentExists()
    {
        if($this->getLeftout())
            return TRUE;
        else
            return FALSE; 
    }
    
    public function isRegistered()
    {
        if($this->isAdmitted() || $this->isEnrolled())
            return FALSE;
        else
            return TRUE;          
    }
    
    public function withdrawEnrollment()
    {
        $this->setLeftout(TRUE);
        $this->setSemesterAction(sfConfig::get('app_withdrawn_semester_action'));
        $this->setAcademicStatus(sfConfig::get('app_withdrawal_status'));
    }
    public function unenroll()
    {
        /* Update first, then Delete child rows
         * 
         */
        $this->setSectionId(NULL);
        $this->setSemesterAction(0);
        $this->save();         
        
        if($this->hasRegistrations())
        {
            foreach($this->getRegistrations() as $rg)
                $rg->unregister();     
        }        
    }
    
    public function hasRegistrations()
    {
        if($this->getRegistrations()->count() != 0)
            return TRUE;
        else
            return FALSE; 
    }
    public function updateEnrollment($programId, $academicYear, $year, $semester)
    {
        $this->setProgramId($programId);
        $this->setAcademicYear($academicYear);
        $this->setYear($year);
        $this->setSemester($semester);
        $this->save(); 
    }
    
    
    public function getEnrollmentStatus()
    {
        if($this->getSemesterAction() == SemesterActions::enrolled() && $this->getEnrollmentAction() == EnrollmentActions::admission() && is_null($this->getSectionId()) )
            return "Admitted";
        elseif($this->getSemesterAction() == SemesterActions::enrolled() && $this->getEnrollmentAction() == EnrollmentActions::admission() && $this->getSectionId() != '' )
            return "Enrolled";        
        elseif($this->getSemesterAction() == SemesterActions::enrolled() && $this->getEnrollmentAction() == EnrollmentActions::promotion() && $this->getSectionId() != '' )
            return "Enrolled";                 
        elseif($this->getSemesterAction() == SemesterActions::enrolled() && $this->getEnrollmentAction() == EnrollmentActions::readmission() && $this->getSectionId() != '' )
            return "Enrolled";         
        elseif($this->getSemesterAction() == SemesterActions::enrolled() && $this->getEnrollmentAction() == EnrollmentActions::transfer() && $this->getSectionId() != '' )
            return "Enrolled";         
        elseif($this->getSemesterAction() == SemesterActions::enrolled() && $this->getEnrollmentAction() == EnrollmentActions::clearance() && $this->getSectionId() != '' )
            return "Enrolled";         
        elseif($this->getSemesterAction() == SemesterActions::enrolled() && $this->getEnrollmentAction() == EnrollmentActions::add() && $this->getSectionId() != '' )
            return "Enrolled";
        
        
        elseif($this->getSemesterAction() == SemesterActions::registered() && $this->getEnrollmentAction() == EnrollmentActions::admission())
            return "Registered";
        elseif($this->getSemesterAction() == SemesterActions::registered() && $this->getEnrollmentAction() == EnrollmentActions::promotion())
            return "Registered";                 
        elseif($this->getSemesterAction() == SemesterActions::registered() && $this->getEnrollmentAction() == EnrollmentActions::readmission())
            return "Registered";         
        elseif($this->getSemesterAction() == SemesterActions::registered() && $this->getEnrollmentAction() == EnrollmentActions::transfer())
            return "Registered";         
        elseif($this->getSemesterAction() == SemesterActions::registered() && $this->getEnrollmentAction() == EnrollmentActions::clearance())
            return "Registered";         
        elseif($this->getSemesterAction() == SemesterActions::registered() && $this->getEnrollmentAction() == EnrollmentActions::add())            
            return "Registered";
        
        
        elseif($this->getSemesterAction() == SemesterActions::promoted() && $this->getEnrollmentAction() == EnrollmentActions::admission())
            return "Promoted";
        elseif($this->getSemesterAction() == SemesterActions::promoted() && $this->getEnrollmentAction() == EnrollmentActions::promotion())
            return "Promoted";                 
        elseif($this->getSemesterAction() == SemesterActions::promoted() && $this->getEnrollmentAction() == EnrollmentActions::readmission())
            return "Promoted";         
        elseif($this->getSemesterAction() == SemesterActions::promoted() && $this->getEnrollmentAction() == EnrollmentActions::transfer())
            return "Promoted";         
        elseif($this->getSemesterAction() == SemesterActions::promoted() && $this->getEnrollmentAction() == EnrollmentActions::clearance())
            return "Promoted";         
        elseif($this->getSemesterAction() == SemesterActions::promoted() && $this->getEnrollmentAction() == EnrollmentActions::add())            
            return "Promoted"; 
        
        elseif($this->getSemesterAction() == SemesterActions::withdrawn() && $this->getEnrollmentAction() == EnrollmentActions::admission())
            return "Withdrawn";
        elseif($this->getSemesterAction() == SemesterActions::withdrawn() && $this->getEnrollmentAction() == EnrollmentActions::promotion())
            return "Withdrawn";                 
        elseif($this->getSemesterAction() == SemesterActions::withdrawn() && $this->getEnrollmentAction() == EnrollmentActions::readmission())
            return "Withdrawn";         
        elseif($this->getSemesterAction() == SemesterActions::withdrawn() && $this->getEnrollmentAction() == EnrollmentActions::transfer())
            return "Withdrawn";         
        elseif($this->getSemesterAction() == SemesterActions::withdrawn() && $this->getEnrollmentAction() == EnrollmentActions::clearance())
            return "Withdrawn";         
        elseif($this->getSemesterAction() == SemesterActions::withdrawn() && $this->getEnrollmentAction() == EnrollmentActions::add())            
            return "Withdrawn";         

        elseif($this->getSemesterAction() == SemesterActions::under() && $this->getEnrollmentAction() == EnrollmentActions::admission())
            return "Under";
        elseif($this->getSemesterAction() == SemesterActions::under() && $this->getEnrollmentAction() == EnrollmentActions::promotion())
            return "Under";                 
        elseif($this->getSemesterAction() == SemesterActions::under() && $this->getEnrollmentAction() == EnrollmentActions::readmission())
            return "Under";         
        elseif($this->getSemesterAction() == SemesterActions::under() && $this->getEnrollmentAction() == EnrollmentActions::transfer())
            return "Under";         
        elseif($this->getSemesterAction() == SemesterActions::under() && $this->getEnrollmentAction() == EnrollmentActions::clearance())
            return "Under";         
        elseif($this->getSemesterAction() == SemesterActions::under() && $this->getEnrollmentAction() == EnrollmentActions::add())            
            return "Under";        
        
        elseif($this->getSemesterAction() == SemesterActions::dismissed() && $this->getEnrollmentAction() == EnrollmentActions::admission())
            return "Dismissed";
        elseif($this->getSemesterAction() == SemesterActions::dismissed() && $this->getEnrollmentAction() == EnrollmentActions::promotion())
            return "Dismissed";                 
        elseif($this->getSemesterAction() == SemesterActions::dismissed() && $this->getEnrollmentAction() == EnrollmentActions::readmission())
            return "Dismissed";         
        elseif($this->getSemesterAction() == SemesterActions::dismissed() && $this->getEnrollmentAction() == EnrollmentActions::transfer())
            return "Dismissed";         
        elseif($this->getSemesterAction() == SemesterActions::dismissed() && $this->getEnrollmentAction() == EnrollmentActions::clearance())
            return "Dismissed";         
        elseif($this->getSemesterAction() == SemesterActions::dismissed() && $this->getEnrollmentAction() == EnrollmentActions::add())            
            return "Dismissed";          
        
        elseif($this->getSemesterAction() == SemesterActions::dropout() && $this->getEnrollmentAction() == EnrollmentActions::admission())
            return "Dropout";
        elseif($this->getSemesterAction() == SemesterActions::dropout() && $this->getEnrollmentAction() == EnrollmentActions::promotion())
            return "Dropout";                 
        elseif($this->getSemesterAction() == SemesterActions::dropout() && $this->getEnrollmentAction() == EnrollmentActions::readmission())
            return "Dropout";         
        elseif($this->getSemesterAction() == SemesterActions::dropout() && $this->getEnrollmentAction() == EnrollmentActions::transfer())
            return "Dropout";         
        elseif($this->getSemesterAction() == SemesterActions::dropout() && $this->getEnrollmentAction() == EnrollmentActions::clearance())
            return "Dropout";         
        elseif($this->getSemesterAction() == SemesterActions::dropout() && $this->getEnrollmentAction() == EnrollmentActions::add())            
            return "Dropout";         
        
        elseif($this->getSemesterAction() == SemesterActions::transferred() && $this->getEnrollmentAction() == EnrollmentActions::admission())
            return "Transfered";
        elseif($this->getSemesterAction() == SemesterActions::transferred() && $this->getEnrollmentAction() == EnrollmentActions::promotion())
            return "Transfered";                 
        elseif($this->getSemesterAction() == SemesterActions::transferred() && $this->getEnrollmentAction() == EnrollmentActions::readmission())
            return "Transfered";         
        elseif($this->getSemesterAction() == SemesterActions::transferred() && $this->getEnrollmentAction() == EnrollmentActions::transfer())
            return "Transfered";         
        elseif($this->getSemesterAction() == SemesterActions::transferred() && $this->getEnrollmentAction() == EnrollmentActions::clearance())
            return "Transfered";         
        elseif($this->getSemesterAction() == SemesterActions::transferred() && $this->getEnrollmentAction() == EnrollmentActions::add())            
            return "Transfered";           
        
        
        else
            return "Not Known"; 
    }
    
    public function hasPrerequisiteProblem($departmentId = NULL)
    {
        $semester_prerequisites = array();
        ## get current course offers,
        $program_section = Doctrine_Core::getTable('ProgramSection')->findOneById($this->getSectionId());
        
        if($program_section->hasCourseOffers())
        {
            ## get Semester Prerequisite Courses
            $semester_prerequisites     = $program_section->getSemesterPrerequisites($departmentId); 
            
            if(!is_null($semester_prerequisites))
            {
                $student    = Doctrine_Core::getTable('Student')->findOneById($this->getStudentId());
                foreach($semester_prerequisites as $courseId)
                {
                    if(!$student->isClearForCourse($courseId))
                    {
                        return TRUE; 
                    }
                }
            }
        }
        
        return FALSE; 
        ## get List of prerequisite courses for current semester!
        
        ## check if student has already taken, and passed those courses
        
        ## return result,
    }
    
    public function hasNormalRegistration()
    {
        if($this->getRegistrations()->count() > 0) 
        {
            foreach($this->getRegistrations() as $registration)
            {
                if($registration->isNormal())
                    return TRUE;
            }
        }
        
        return FALSE; 
    }
    
    public function getDroppableCourses($departmentId = NULL) ## Current Enrollment Droppable Courses!
    {
        $semester_prerequisites     = array();
        $droppable_courses          = array(); 
        ## get current course offers,        
        
        if($this->getProgramSection()->hasCourseOffers() )
        {
            ## get Semester Prerequisite Courses
            $semester_prerequisites     = $this->getProgramSection()->getSemesterPrerequisites($departmentId); 
            
            if(!is_null($semester_prerequisites))
            {                
                foreach($semester_prerequisites as $courseId)
                {
                    if(!$this->getStudent()->isClearForCourse($courseId))
                    {
                        $post_requisite = Doctrine_Core::getTable('Course')->getPostRequisiteCourses($departmentId, $courseId); ## RelatedCourses Objects collection
                        
                        foreach($post_requisite as $ps)
                            $droppable_courses[$ps->getCourse()->getId()] = $ps->getCourse()->getCourseNumber(). ' - '.$ps->getCourse()->getName();
                        
                    }
                }
            }
        }
        
        if(is_null($droppable_courses))
            return NULL;
        else
            return $droppable_courses;
        
    }
    
    public function getRegistrationCourses($departmentId = NULL)  ## Returns Allowed Semester Courses A Student Can Register To
    {
        $semester_prerequisites     = array();
        $droppable_courses          = array(); 
        $registration_courses       = array(); 
        ## get current course offers,        
        
        if($this->getProgramSection()->hasCourseOffers() )
        {
            ## get Semester Prerequisite Courses
            $semester_prerequisites     = $this->getProgramSection()->getSemesterPrerequisites($departmentId); 
            
            if(!is_null($semester_prerequisites))
            {                
                foreach($semester_prerequisites as $courseId)
                {
                    if(!$this->getStudent()->isClearForCourse($courseId))
                    {
                        $post_requisite = Doctrine_Core::getTable('Course')->getPostRequisiteCourses($departmentId, $courseId); ## RelatedCourses Objects collection
                        
                        foreach($post_requisite as $ps)
                            $droppable_courses[$ps->getCourse()->getId()] = $ps->getCourse()->getCourseNumber(). ' - '.$ps->getCourse()->getName();
                        
                        $semester_courses = $this->getProgramSection()->getCourseOffers();
                        foreach($semester_courses  as $key=>$value)
                        {
                            if(!array_key_exists($key, $droppable_courses))
                                    $registration_courses[$key] = $value; 
                        }
                        
                    }
                }
            }
        }
        
        if(is_null($registration_courses))
            return NULL;
        else
            return $registration_courses; 
    }
    
    public function register($semesterCourseIdsArray = NULL)
    {
        if(is_null($semesterCourseIdsArray) ) 
            return FALSE;
        if($this->isRegistered())
            return FALSE;
        
        $this->setSemesterAction(sfConfig::get('app_registered_semester_action'));
        $this->save();
        
        $registration = new Registration();
        if($registration->register($this->getId(), $semesterCourseIdsArray))
            return TRUE;
        else
        {
            $this->setSemesterAction(sfConfig::get('app_enrolled_semester_action'));
            $this->save();
            return FALSE; 
        }
    }
    
    public function drop($courseIdsArray = NULL)
    {
        if(is_null($courseIdsArray))
            return FALSE;
        
        foreach($this->getRegistrations() as $registration )
        {
            if($registration->isNormal())  ## This is the registration OBJECT we need, as students can only make one Normal Registration
                $normalRegistration = $registration;
        }
        
        if($normalRegistration->drop($courseIdsArray))
            return TRUE;
        
        return FALSE; 
    }
    
    public function registerWithDrop($courseIdsArrayToRegister = NULL, $courseIdsArrayToDrop = NULL)
    {
        if(is_null($courseIdsArrayToRegister))
            return FALSE;
        if(is_null($courseIdsArrayToDrop))
            return FALSE;        
        
        $this->setSemesterAction(sfConfig::get('app_registered_semester_action'));
        $this->save();
        
        $registration = new Registration();
        if($registration->registerWithDrop($this->getId(), $courseIdsArrayToRegister, $courseIdsArrayToDrop))
            return TRUE;
        else
        {
            $this->setSemesterAction(sfConfig::get('app_enrolled_semester_action'));
            $this->save();
            return FALSE; 
        }
    }    
}
