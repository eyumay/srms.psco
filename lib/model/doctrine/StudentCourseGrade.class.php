<?php

/**
 * StudentCourseGrade
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    srmsnew
 * @subpackage model
 * @author     EyuelG
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class StudentCourseGrade extends BaseStudentCourseGrade
{
    public function dropStudentCourse()
    {
        $this->setIsCalculated(FALSE); 
        $this->setIsDropped(TRUE);
        $this->save();
    }
    public function registerStudentCourse($registrationId = null, $studentId = null, $courseId = null )
    {
        $this->setStudentId($studentId);
        $this->setRegistrationId($registrationId);
        $this->setCourseId($courseId);
        $this->setIsCalculated(1); 
        
        $this->save(); 
    }

    public function addStudentCourse($registrationId = null, $studentId = null, $courseId = null )
    {
        if($this->checkIfStudentCourseGradeExists($studentId, $courseId))
        {
            $oneSCG = $this->getOneStudentCourseGrade($studentId, $courseId);
            if(!empty($oneSCG))
            {                 
                if($oneSCG->checkIfStudentCourseIsFailed())
                {
                    ## current course [one that has been failed]
                    $oneSCG->setIsCalculated(FALSE); 

                    ## new course is added
                    $newSCG = new StudentCourseGrade();               
                    $newSCG->setStudentId($studentId);
                    $newSCG->setRegistrationId($registrationId);
                    $newSCG->setCourseId($courseId);
                    $newSCG->setIsCalculated(TRUE); 
                    $newSCG->setIsRepeated(TRUE);
                    $newSCG->setIsAcademicRepeated(TRUE);
                    $newSCG->setIsAdded(TRUE);

                    $newSCG->save();                 
                    $oneSCG->save();
                }
            }
            else { ## course must have been dropped ##
                ## new course is added
                $newSCG = new StudentCourseGrade();               
                $newSCG->setStudentId($studentId);
                $newSCG->setRegistrationId($registrationId);
                $newSCG->setCourseId($courseId);
                $newSCG->setIsCalculated(TRUE); 
                $newSCG->setIsAdded(TRUE);
                $newSCG->save();
            }
        }
    }
    
    public function updateGrade($gradeId = null )
    {
        if($gradeId != null )
            $this->setGradeId($gradeId);
        
        $this->save(); 
    }
    public function updateGradeStatus($gradeId = null )
    {
        if($gradeId != null )
            $this->setGradeStatus(1);
        
        $this->save(); 
    }    
    
    public function checkIfStudentCourseIsFailed()   
    {
        if($this->getGrade() == 'F')
            return TRUE;
        else
            return FALSE; 
    }
    
    public function getOneStudentCourseGrade($studentId = null, $courseId = null )
    {
        $q = Doctrine_Query::create()
                ->from('StudentCourseGrade scg')
                ->where('scg.student_id = ?', $studentId)
                ->andWhere('scg.course_id = ?', $courseId)
                ->andWhere('scg.is_calculated = ?', TRUE);  
        
        if($q->execute()->count()  != 0)
            return $q->fetchOne(); 
        else
            return null; 
    }
    
    public function checkIfStudentCourseGradeExists($studentId = null, $courseId = null)
    {
        $q = Doctrine_Query::create()
                ->from('StudentCourseGrade scg')
                ->where('scg.student_id = ?', $studentId)
                ->andWhere('scg.course_id = ?', $courseId);  
        
        if($q->execute()->count()  != 0)
            return TRUE; 
        else
            return FALSE;         
    }

    public function getCourseStatus()
    {
        if($this->getIsDropped())
            return "Dropped";
        if($this->getIsRepeated() && $this->getIsCalculated())
            return "Repeated";        
        if($this->getIsCalculated())
            return "Registered";
        if($this->getIsAdded())
            return "Added";
    }
    
    public function hasGrade()
    {
        if(is_null($this->getGradeId()))
            return FALSE;
        else
            return TRUE;
    }
    public function isPassed()
    {
        if($this->getGrade()->getGradechar() == "A+")
            return TRUE;
        elseif($this->getGrade()->getGradechar() == "A")
            return TRUE; 
        elseif($this->getGrade()->getGradechar() == "A-")
            return TRUE;
        elseif($this->getGrade()->getGradechar() == "B+")
            return TRUE;
        elseif($this->getGrade()->getGradechar() == "B")
            return TRUE;
        elseif($this->getGrade()->getGradechar() == "B-")
            return TRUE;
        elseif($this->getGrade()->getGradechar() == "C+")
            return TRUE;
        elseif($this->getGrade()->getGradechar() == "C")
            return TRUE;
        elseif($this->getGrade()->getGradechar() == "C-")
            return TRUE;        
        elseif($this->getGrade()->getGradechar() == "D+")
            return TRUE;
        elseif($this->getGrade()->getGradechar() == "D")
            return TRUE;
        elseif($this->getGrade()->getGradechar() == "D-")
            return TRUE;        
        else
            return FALSE; 
    }    
    
    public function isDropped()
    {
        if($this->getIsDropped() && !$this->getIsCalculated())
            return TRUE;
        
        return FALSE; 
    }
    
    public function register($studentId = NULL, $registrationId = NULL, $courseId = NULL)
    {
        if(is_null($studentId))
            return FALSE;
        if(is_null($courseId))
            return FALSE;        
        if(is_null($registrationId))
            return FALSE;        
                            
        $this->setStudentId($studentId);
        $this->setRegistrationId($registrationId); 
        $this->setCourseId($courseId);
        $this->setIsCalculated(TRUE); 

        $this->save(); 
        
        return TRUE; 
    }
    
    public function isOkToDrop($courseIdsArray = NULL )
    {
        if(is_null($courseIdsArray))
            return FALSE;
        
        foreach($courseIdsArray as $courseId=>$courseName)
        {
            if($this->getCourseId() == $courseId)
            {
                if(!$this->isDropped())
                    return TRUE;
            }
        }
        
        return FALSE; 
    }   
    
    public function drop()
    {
        $this->setIsDropped(TRUE);
        $this->setIsCalculated(FALSE);
        
        if($this->save())
            return TRUE;
        
        return TRUE; 
    }
    
    public function registerWithDrop($studentId  = NULL, $registrationId = NULL, $courseId = NULL)
    {
        if(is_null($studentId))
            return FALSE;
        if(is_null($courseId))
            return FALSE;        
        if(is_null($registrationId))
            return FALSE;        
                           
        $this->setStudentId($studentId);
        $this->setRegistrationId($registrationId); 
        $this->setCourseId($courseId);
        $this->setIsDropped(TRUE);
        $this->setIsCalculated(FALSE); 

        $this->save();
        
        return TRUE; 
    }

}
