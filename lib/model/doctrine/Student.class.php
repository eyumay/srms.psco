<?php

/**
 * Student
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class Student extends BaseStudent
{

  public function __toString()
  {
  	 return $this->getStudentUid(). " ". $this->getName(). " " . $this->getFathersName(). " ". $this->getGrandfathersName();
  }
  
  public function save(Doctrine_Connection $conn = null )
  {
    if($this->isNew() && !$this->getStudentUid())
    {
        $this->setStudentUid($this->getGeneratedIdNumber()); 
    } 

    parent::save($conn);
    AutoincrementTable::updateAutoincrement($this->getId(), 'Student');     
  }
  
  public function getGeneratedIdNumber()
  {
      $id_number_to_try = $this->generate_id_number();
      
      ## check this ID number
      $count = 0;
      while(StudentTable::check_if_id_number_exists($id_number_to_try))
      {
          $id_number_to_try = $this->generate_id_number();
          
          if($count==6)
             die('Too many attempts to find a ID Number');
          
          $count++; 
      }
      
      return $id_number_to_try; 
  }
  
  public function generate_id_number()
  {
      ## Get last Student ID Number,
      
      ## Compute and find 
      
      $id_number = substr(mt_rand(), 0, 4)."/".substr(date('Y'), 2, 4);
           
      return $id_number; 
  }

	protected function get_all_possible_id($suffix = "")
	{	
      // Fetch one record, if there is and if this is first record: generate record; 
	   if(UserTable::isFirstStudent()) {
	     $year = substr(date('Y'), 2, 4) - 8;
        $id_number = "0001"."/".$year;
        return $id_number;	   
      }
      else {
        $id_number = substr(mt_rand(), 0, 4)."/".substr(date('Y'), 2, 4);     
      }
      return $id_number; 
   } 

    public function getAllDepartments() {
        $departments = Doctrine_Core::getTable('Department')
                ->createQuery('a')
                ->execute();

        return $departments;
    }     
    public function getFatherNameByUid($studentuid) {
        $q = Doctrine_Query::create()
                ->from('Student u')
                ->where('u.student_uid = ?', $studentuid);

        $user = $q->fetchOne();
        return $user->getFathersName();
    }

    public function getNameByUid($studentuid) {
        $q = Doctrine_Query::create()
                ->from('Student u')
                ->where('u.student_uid = ?', $studentuid);

        $user = $q->fetchOne();
        return $user->getName();
    }

    public function getGrandfatherNameByUid($studentuid) {
        $q = Doctrine_Query::create()
                ->from('Student u')
                ->where('u.student_uid = ?', $studentuid);

        $user = $q->fetchOne();
        return $user->getGrandfathersName();
    }

    public function getNameById($id) {

        $q = Doctrine_Query::create()
                ->from('Towns j')
                ->where('j.id = ?', $id);
        $town = $q->fetchOne();
        return $town->getName();
    }
    public function getProgramNameById($id) {

        $q = Doctrine_Query::create()
                ->from('Program p')
                ->where('p.id = ?', $id);
        $program = $q->fetchOne();
        return $program->getName();
    }
    public function getFilteredName($studentname) {
      $students = Doctrine_Core::getTable('Student')
          ->createQuery('a');
      $students->orWhere('a.name like ?', $studentname.'%');
      if($students != null){
        $array_of_students = $students->fetchArray();
        return $array_of_users;
      }
      else{
        return null;
      }
    }   
    
    public function getWithActiveCourses()
    {
        $q = Doctrine_Query::create()
                ->from('Student st')
                ->leftJoin('st.EnrollmentInfos ei')
                ->leftJoin('ei.Registrations rg')
                ->leftJoin('rg.StudentCourseGrades scg')
                ->where('st.id = ? ', $this->getId())
                ->andWhere('scg.is_calculated = ?', TRUE) ##One that is active
                ->andWhere('scg.grade_id IS NOT NULL'); ##Plus courses for which grade is submitted, this is to ommit current semester registrations

        return $q->fetchOne();
    } 

    public function checkIfActiveCoursesHaveGrades()
    {
        $q = Doctrine_Query::create()
                ->from('Student st')
                ->leftJoin('st.EnrollmentInfos ei')
                ->leftJoin('ei.Registrations rg')
                ->leftJoin('rg.StudentCourseGrades scg')
                ->where('st.id = ? ', $this->getId())
                ->andWhere('scg.is_calculated = ?', TRUE) ##One that is active
                ->andWhere('scg.grade_id IS NOT NULL'); ##Plus courses for which grade is submitted, this is to ommit current semester registrations

        if($q->execute()->count() != 0)
            return TRUE;
        else
            return FALSE; 
    }     
    
    public function getEnrollmentInfoByCourse($courseId = null)            
    {
        $q = Doctrine_Query::create()
                ->from('Student st')
                ->leftJoin('st.EnrollmentInfos ei')
                ->leftJoin('ei.Registrations rg')
                ->leftJoin('rg.StudentCourseGrades scg') 
                ->where('st.id = ? ', $this->getId())        
                ->andWhere('scg.course_id = ?', $courseId)
                ->andWhere('scg.is_calculated = ?', TRUE);##calculatable, 
        
        return $q->fetchOne();
        
    } 
    
    public function getCoursesInCoursePool()            
    {
        $q = Doctrine_Query::create()
                ->from('Student st')
                ->leftJoin('st.EnrollmentInfos ei')
                ->leftJoin('ei.CoursePools cp')
                ->where('st.id = ?', $this->getId());
        
        if($q->execute()->count() != 0)
        {
            return $q->fetchOne();
        }
        else
            return null; 
        
    }   

    public function getCoursesArrayInCoursePool()            
    {
        $coursePoolArray = array(); 
        $q = Doctrine_Query::create()
                ->from('Student st')
                ->leftJoin('st.EnrollmentInfos ei')
                ->leftJoin('ei.CoursePools cp')
                ->where('st.id = ?', $this->getId());
        
        if($q->execute()->count() != 0)
        {
            foreach($q->execute() as $student )
                foreach($student->getEnrollmentInfos() as $enrollment)
                    foreach($enrollment->getCoursePools() as $coursePool)
                        $coursePoolArray[] = $coursePool->getCourseId();
                    
            return $coursePoolArray; 
        }
        else
            return FALSE; 
        
    }     
    
    public function getSectionEnrollmentInfo($sectionId = null)            
    {
        $coursePoolArray = array(); 
        $q = Doctrine_Query::create()
                ->from('EnrollmentInfo ei') 
                ->where('ei.student_id = ?', $this->getId())
                ->andWhere('ei.section_id = ?', $sectionId);
        
        return $q->fetchOne();
    }

    public function getWithLeftoutEnrollmentActiveCourses($year = null, $semester = null, $academicYear = null )
    {
        $q = Doctrine_Query::create()
                ->from('Student st')
                ->innerJoin('st.EnrollmentInfos ei')
                ->innerJoin('ei.Registrations rg')
                ->innerJoin('rg.StudentCourseGrades scg')
                ->where('st.id = ? ', $this->getId())
                ->andWhere('ei.leftout = ?', TRUE)
                ->andWhere('ei.year = ?', $year)
                ->andWhere('ei.semester = ?', $semester)
                ->andWhere('ei.academic_year = ?', $academicYear)
                ->andWhere('scg.is_calculated = ?', TRUE) ##One that is active
                ->andWhere('scg.grade_id IS NOT NULL'); ##Plus courses for which grade is submitted, this is to ommit current semester registrations


        return $q->fetchOne();
    }   
    
    public function checkIfLefoutEnrollmentExist($year = null, $semester = null, $academicYear = null )
    {
        $q = Doctrine_Query::create()
                ->from('Student st')
                ->innerJoin('st.EnrollmentInfos ei')
                ->innerJoin('ei.Registrations rg')
                ->innerJoin('rg.StudentCourseGrades scg')
                ->where('st.id = ? ', $this->getId())
                ->andWhere('ei.leftout = ?', TRUE)
                ->andWhere('ei.year = ?', $year)
                ->andWhere('ei.semester = ?', $semester)
                ->andWhere('ei.academic_year = ?', $academicYear)
                ->andWhere('scg.is_calculated = ?', TRUE) ##One that is active
                ->andWhere('scg.grade_id IS NOT NULL'); ##Plus courses for which grade is submitted, this is to ommit current semester registrations

        if($q->execute()->count() != 0)
            return TRUE;
        else
            return FALSE; 
    }
    public function getSemesterDetails($sectionId = null)            
    {        
        $q = Doctrine_Query::create()
                ->from('Student st')
                ->leftJoin('st.EnrollmentInfos ei')
                ->leftJoin('ei.CoursePools cp')
                ->leftJoin('ei.Registrations rg')
                ->leftJoin('rg.StudentCourseGrades scg')
                ->where('ei.student_id = ?', $this->getId())
                ->andWhere('ei.section_id = ?', $sectionId);
        
        if($q->execute()->count() != 0)
            return $q->fetchOne();
        else
            return NULL; 
    }    
    public function getEverything($sectionId = null)            
    {        
        $q = Doctrine_Query::create()
                ->from('Student st')
                ->leftJoin('st.EnrollmentInfos ei')
                ->leftJoin('ei.CoursePools cp')
                ->leftJoin('ei.Registrations rg')
                ->leftJoin('rg.StudentCourseGrades scg')
                ->where('ei.student_id = ?', $this->getId());
        
        if($q->execute()->count() != 0)
            return $q->fetchOne();
        else
            return NULL; 
    }      
    
    public function checkIfEnrolled()
    {
        foreach($this->getEnrollmentInfos() as $enrollment)
        {
            if($enrollment->checkIfEnrolled())
                return TRUE;
            else
                return FALSE;
        }
        return FALSE;
    }
    
    public function deleteAdmission()
    {
        ## check student is at Admission stage -- TOBE IMPLEMENTED LATER ON
        foreach($this->getEnrollmentInfos() as $ei)
            $ei->delete ();

        $this->getStudentCenter()->delete();

        $this->delete(); 
    }
    public function isClearForCourse($courseId = NULL)
    {
        ## student is clear when student course status is PASSED, or EXEMPTED,

        ## student is NOT clear when course status is FAILED, I, NG, Withdrawn OR DROPPED

        if($this->hasTakenCourse($courseId))
        {
            if($this->studentCourseIsActive($courseId)) ## IS THE COURSE STILL ACTIVE
            {
                if($this->studentCourseHasGrade($courseId))
                {
                    if($this->studentCourseIsPassed($courseId))
                        return TRUE;                    
                }
            }                        
            else { ## COURSE MUST HAVE BEEN DROPPED
                if($this->studentDroppedCourse($courseId))
                    return TRUE;
            }
        }
        else { ## ELSE, STUDENT MUST HAVE EXEMPTED THE COURSE !!!
            if($this->studentExemptedCourse($courseId))
                return TRUE;
        }
        
        return FALSE;
    }

    public function hasTakenCourse($courseId = NULL)
    {
        foreach($this->getEnrollmentInfos() as $ei)
        {
            foreach($ei->getRegistrations() as $rg)
            {
                foreach($rg->getStudentCourseGrades() as $scg)
                {
                    if($scg->getCourseId() == $courseId)
                        return TRUE;
                }
            }
        }

        return FALSE; 
    }

    public function studentCourseIsActive($courseId = NULL)
    {
        foreach($this->getEnrollmentInfos() as $ei)
        {
            foreach($ei->getRegistrations() as $rg)
            {
                foreach($rg->getStudentCourseGrades() as $scg)
                {
                    if($scg->getCourseId() == $courseId && $scg->getIsCalculated() )
                        return TRUE;
                }
            }
        }

        return FALSE; 
    }
    
    public function studentCourseHasGrade($courseId = NULL)
    {
        foreach($this->getEnrollmentInfos() as $ei)
        {
            foreach($ei->getRegistrations() as $rg)
            {
                foreach($rg->getStudentCourseGrades() as $scg)
                {
                    if($scg->getCourseId() == $courseId && $scg->getIsCalculated() )
                        if($scg->hasGrade())
                            return TRUE;
                }
            }
        }

        return FALSE; 
    }    
    
    public function studentCourseIsPassed($courseId = NULL)
    {
        foreach($this->getEnrollmentInfos() as $ei)
        {
            foreach($ei->getRegistrations() as $rg)
            {
                foreach($rg->getStudentCourseGrades() as $scg)
                {
                    if($scg->getCourseId() == $courseId && $scg->getIsCalculated() )
                        if($scg->isPassed())
                            return TRUE;
                }
            }
        }

        return FALSE; 
    }    
    
    public function studentDroppedCourse($courseId = NULL)
    {
        foreach($this->getEnrollmentInfos() as $ei)
        {
            foreach($ei->getRegistrations() as $rg)
            {
                foreach($rg->getStudentCourseGrades() as $scg)
                {                        
                    if(($scg->getCourseId() == $courseId) && $scg->isDropped())
                        return TRUE;
                }
            }
        }

        return FALSE;        
    }
    
    public function studentExemptedCourse($courseId = NULL)
    {
        foreach($this->getStudentExemptions() as $exemption)
        {
            if($exemption->getCourseId() == $courseId)
                return TRUE; 
        }
        
        return FALSE;
    }
    
    public function register($sectionId = NULL, $courseIdsArray = NULL)
    {
        if(is_null($sectionId))
            return FALSE;
        if(is_null($courseIdsArray))
            return FALSE;
        
        $program_section            = Doctrine_Core::getTable('ProgramSection')->findOneById($sectionId);           
        $studentCurrentEnrollment   = $program_section->getStudentEnrollmentInfo($this->getId());
        
        if(is_null($studentCurrentEnrollment))
            return FALSE; 
        
        if($studentCurrentEnrollment->register($courseIdsArray) )
            return TRUE;
                
        
        return FALSE; 
    }
    
    public function drop($sectionId = NULL, $courseIdsArray = NULL)
    {
        if(is_null($sectionId))
            return FALSE;
        if(is_null($courseIdsArray))
            return FALSE;        
        
        foreach($this->getEnrollmentInfos() as $enrollment)
        {
            if($enrollment->getSectionId() == $sectionId)
                $studentCurrentEnrollment = $enrollment;
        }  
        
        if($studentCurrentEnrollment->drop($courseIdsArray))
            return TRUE;
                
        
        return FALSE;         
        
    }

    public function registerWithDrop($sectionId = NULL, $courseIdsArrayToRegister = NULL, $courseIdsArrayToDrop = NULL)
    {
        if(is_null($sectionId))
            return FALSE;
        if(is_null($courseIdsArrayToRegister))
            return FALSE;        
        if(is_null($courseIdsArrayToDrop))
            return FALSE;                 
        $program_section            = Doctrine_Core::getTable('ProgramSection')->findOneById($sectionId);           
        $studentCurrentEnrollment   = $program_section->getStudentEnrollmentInfo($this->getId());
        
        if($studentCurrentEnrollment->registerWithDrop($courseIdsArrayToRegister, $courseIdsArrayToDrop))
            return TRUE;
                        
        return FALSE;         
        
    }    
    
    public function getStudentIdNamePair()
    {
        $studentIdNamePair  = array(); 
        $studentIdNamePair[$this->getId()] = $this->getName().' '.$this->getFathersName().' '.$this->getGrandfathersName();
        
        return $studentIdNamePair; 
    }
    
    public function getRegisteredCourses($sectionId = NULL)            
    {
        $courseIdsNamePair  = array();
        
        if(is_null($sectionId))
            return NULL;
        
        $program_section            = Doctrine_Core::getTable('ProgramSection')->findOneById($sectionId);           
        $studentCurrentEnrollment   = $program_section->getStudentEnrollmentInfo($this->getId()); 
        
        if($studentCurrentEnrollment->getRegistrations()->count() == 0) ## Student has not been registered.
            return NULL;         
        
        foreach($studentCurrentEnrollment->getRegistrations() as $rg)            
        {
            if($rg->isNormal())
            {
                foreach($rg->getStudentCourseGrades() as $scg)
                {
                    if(!$scg->isDropped())
                        $courseIdsNamePair[$scg->getCourseId()] = $scg->getCourse()->getCourseNumber().' - '.$scg->getCourse()->getName();
                }
            }
        }
        
        if(!is_null($courseIdsNamePair))
            return $courseIdsNamePair;
        else
            return NULL; 
    }
}
